import time
import pandas as pd
from alive_progress import alive_bar
from miscellaneous import estados, especialidades, inscri√ß√µes, situa√ß√µes, usu√°rio
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def main():

    pesquisa = coletar()

    while True:
        try:
            preencher(pesquisa)
            break
        except:
           print("---------------------------------------")
           print("‚ùå INVALID FILTER INPUT, TRY AGAIN ‚ùå")
           print("=======================================")
           pesquisa = coletar()
           continue

    dados_cfm = scrape()

    while True:
        try:
            print("=====================================")
            formato = input("üì¶ CSV or Excel: ").lower()
            print(selecionar_formato(formato, dados_cfm, pesquisa))
            break
        except ValueError:
            print("-------------------------------------")
            print("‚ùå INVALID FORMAT, TRY AGAIN ‚ùå")
            continue

def selecionar_formato(formato, dados_cfm, pesquisa):
    match formato:
        case "csv":
            exportar_csv(dados_cfm, pesquisa)
            print("-------------------------------------")
            return "‚≠ê EXPORTED TO .CSV SUCCESSFULLY ‚≠ê"
        case "excel":
            exportar_excel(dados_cfm, pesquisa)
            print("--------------------------------------")
            return "‚≠ê EXPORTED TO .XLSX SUCCESSFULLY ‚≠ê"
        case _:
            raise ValueError

def coletar():
    coleta: list = []
    try:
        coleta.append(input("‚û§  State: ").lower())
        coleta.append(input("‚û§  Specialization: ").lower())
        coleta.append(input("‚û§  Registration Type: ").lower())
        coleta.append(input("‚û§  Situation: ").lower())
        return coleta # ['s√£o paulo', 'neurocirurgia', 'principal', 'ativo']
    except:
        raise ValueError

def preencher(arg):
    # seleciona o estado
    estado = Select(driver.find_element(By.NAME, "uf"))
    estado.select_by_value(estados[arg[0]])
    # seleciona o tipo de inscri√ß√£o
    especialidade = Select(driver.find_element(By.NAME, "inscricao"))
    especialidade.select_by_value(inscri√ß√µes[arg[2]])
    # seleciona a situa√ß√£o da inscri√ß√£o
    especialidade = Select(driver.find_element(By.NAME, "tipoSituacao"))
    especialidade.select_by_value(situa√ß√µes[arg[3]])
    # seleciona a especialidade pelo c√≥digo
    especialidade = Select(driver.find_element(By.NAME, "especialidade"))
    especialidade.select_by_value(especialidades[arg[1]])
    # clica em "ENVIAR"
    driver.find_element(By.XPATH, '//button[@class="w-100 btn-buscar btnPesquisar "]').click()
    time.sleep(2)
    anti_recaptcha(0)

def anti_recaptcha(arg):
    try:
        iframe = driver.find_element(By.XPATH, '//iframe[@title="recaptcha challenge expires in two minutes"]')
        driver.switch_to.frame(iframe)
        time.sleep(1.5)
        driver.find_element(By.XPATH, '//*[@id="rc-imageselect"]/div[3]/div[2]/div[1]/div[1]/div[4]').click()
        driver.get_screenshot_as_file(f'click_recaptcha_p{arg}.png')
        try:
            WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CLASS_NAME, 'paginationjs-pages'))
            )
        except:
            driver.find_element(By.ID, 'recaptcha-reload-button').click()
            time.sleep(2)
            driver.find_element(By.XPATH, '//*[@id="rc-audio"]/div[8]/div[2]/div[1]/div[1]/div[4]').click()
            driver.get_screenshot_as_file(f'click_recaptcha_error_p{arg}.png')
    except:
        pass
    driver.switch_to.default_content()

def scrape():
    data: list = []
    WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((By.CLASS_NAME, 'paginationjs-pages'))
    )
    pagina√ß√£o = driver.find_element(By.CLASS_NAME, 'paginationjs-pages')
    total_m√©dicos = int(driver.find_element(By.XPATH, '//*[@id="resultados"]').text.split(' ')[0])
    print('==========================')
    print(f'üíé TOTAL DE M√âDICOS: {total_m√©dicos}')
    print('--------------------------')

    total_p√°ginas = int(pagina√ß√£o.find_elements(By.CSS_SELECTOR, 'li.paginationjs-page')[-1].text)
    p√°gina_atual: int = 1

    with alive_bar(total_m√©dicos) as bar:
        while p√°gina_atual <= total_p√°ginas:
            resultado = driver.find_element(By.CLASS_NAME, "busca-resultado")
            n√∫mero = len(driver.find_elements(By.XPATH, '//div[contains(@class, "resultado-item resultMedico_")]')) + 1
            for x in range(1, n√∫mero):
                m√©dico = resultado.find_element(By.XPATH, f'//*[@id="content"]/div[1]/section[2]/div/div/div/div[1]/div[{x}]')
                nome = m√©dico.find_element(By.TAG_NAME, 'h4').text
                if data != [] and nome in data[0]['Nome']:
                    p√°gina_atual -= 1
                    resolver = driver.find_element(By.CSS_SELECTOR, f'li.paginationjs-page[data-num="{p√°gina_atual}"]')
                    resolver.click()
                    WebDriverWait(driver, 4).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, f'li.paginationjs-page[data-num="{p√°gina_atual - 1}"'))
                    )
                    break
                else:
                    crm = m√©dico.find_element(By.CLASS_NAME, 'col-md-4').text.replace('CRM:', '').strip()
                    inscri√ß√£o = m√©dico.find_element(By.CLASS_NAME, 'col-md-6').text.replace('Inscri√ß√£o:', '').strip()
                    situa√ß√£o = m√©dico.find_element(By.CLASS_NAME, 'col-md').text.replace('Situa√ß√£o:', '').strip()
                    data.append({
                        "CRM": crm,
                        "Nome": nome,
                        "Inscri√ß√£o": inscri√ß√£o,
                        "Situa√ß√£o": situa√ß√£o,
                    })
                    bar()
            if p√°gina_atual != total_p√°ginas:
                pr√≥xima_p√°gina = driver.find_element(By.CSS_SELECTOR, f'li.paginationjs-page[data-num="{p√°gina_atual + 1}"]')
                pr√≥xima_p√°gina.click()
                p√°gina_atual += 1
                time.sleep(1)
                anti_recaptcha(p√°gina_atual)
                WebDriverWait(driver, 4).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, f'li.paginationjs-page[data-num="{p√°gina_atual - 1}"'))
                )
            else:
                p√°gina_atual += 1

    return data

def exportar_csv(data, coleta):
    try:
        df = pd.DataFrame(data)
        df.to_csv(f"cfm_{coleta[1].lower()}_{estados[coleta[0]].lower()}.csv", index=False)
        return f"cfm_{coleta[1].lower()}_{estados[coleta[0]].lower()}.csv"
    except:
        raise ValueError

def exportar_excel(data, coleta):
    try:
        df = pd.DataFrame(data)
        df.to_excel(f"cfm_{coleta[1].lower()}_{estados[coleta[0]].lower()}.xlsx", sheet_name = f'{estados[coleta[0]].upper()}', index=False)
        return f"cfm_{coleta[1].lower()}_{estados[coleta[0]].lower()}.xlsx"
    except:
        raise ValueError

if __name__ == "__main__":

    link = "https://portal.cfm.org.br/busca-medicos/"

    options = Options()
    # options.add_argument("--headless")
    options.add_argument(usu√°rio)
    options.add_argument("--start-maximized")
    options.add_extension('recaptcha.crx')
    options.add_argument('log-level=3')
    options.add_argument('--no-sandbox')
    driver = webdriver.Chrome(options=options) # abre o navegador, sem acessar nenhuma p√°gina
    print("============================================================================")
    print(".:: üß† WELCOME TO THE BRAZILIAN FEDERAL COUNCIL OF MEDICINE DATABASE üß† ::.")
    print("============================================================================")
    driver.get(link)
    driver.find_element(By.XPATH, '//button[@class="button"]').click() # aceita os cookies

    main()